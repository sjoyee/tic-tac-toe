{"version":3,"sources":["components/3DCell/PlayerO.tsx","components/3DCell/PlayerX.tsx","components/Layout/LayoutElem.tsx","components/3DCell/3DCell.tsx","components/3DBoard/3DBoard.tsx","components/3DGame/3DGameElem.tsx","components/3DGameState/GameState.tsx","components/3DActionLog/3DActionLog.tsx","components/3DGame/Text.tsx","components/3DGame/3DGame.tsx","index.tsx"],"names":["PlayerO","props","group","useRef","mesh","ref","position","position-z","isWinId","receiveShadow","castShadow","rotation-z","Math","PI","args","color","colour","PlayerX","Colour","LayoutButton","styled","button","LayoutCard","div","Cell","id","onClick","board","hasWon","winIndex","includes","cellValue","onPointerUp","transparent","opacity","Board","roughness","map","index","x","y","z","Row","gap","Column","GameContainer","checkWin","boardState","winCombination","i","length","a","b","c","winner","ActionLog","history","_","stepIndex","jumpBack","Text","textOptions","font","THREE","parse","ChickenPie","size","height","attach","GamePage","useState","Array","fill","step","gameState","setGameState","current","isNext","handleClick","box","slice","newBoardState","push","useGameState","restartClick","window","location","reload","draw","className","style","width","camera","fov","intensity","OrbitControls","fontSize","fontWeight","alignItems","margin","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db9c0d9e.chunk.js","sourcesContent":["import { useRef } from \"react\";\nimport * as THREE from 'three';\n\ntype OProps = {\n    position: [number, number, number],\n    colour: string,\n    isWinId: boolean,\n}\n\nconst PlayerO = (props: OProps) => {\n    const group = useRef<THREE.Group>();\n    const mesh = useRef<THREE.Mesh>();\n    return (\n        <group ref={group}>\n            <mesh ref={mesh}\n                position={props.position}\n                position-z={props.isWinId ? [3] : [props.position[2]]}\n                receiveShadow\n                castShadow\n                rotation-z={Math.PI / 4}\n            >\n                <torusBufferGeometry args={[1, 0.4, 16, 30]} />\n                <meshStandardMaterial color={props.colour} />\n            </mesh>\n        </group>\n    )\n}\n\nexport default PlayerO;\n","import { useRef } from \"react\";\nimport * as THREE from 'three';\nimport * as ReactThreeFiber from \"@react-three/fiber\";\n\ndeclare global {\n    namespace JSX {\n        interface IntrinsicElements {\n            mesh: ReactThreeFiber.Object3DNode<THREE.Mesh, typeof THREE.Mesh>;\n            group: ReactThreeFiber.Object3DNode<THREE.Group, typeof THREE.Group>;\n        }\n    }\n}\n\ntype XProps = {\n    position: [number, number, number],\n    colour: string,\n    isWinId: boolean,\n}\n\nconst PlayerX = (props: XProps) => {\n    const group = useRef<THREE.Group>();\n    const mesh = useRef<THREE.Mesh>();\n    return (\n        <group ref={group}>\n            <mesh ref={mesh}\n                position={props.position}\n                position-z={props.isWinId ? [3] : [props.position[2]]}\n                receiveShadow\n                castShadow\n                rotation-z={Math.PI / 4}\n            >\n                <cylinderBufferGeometry args={[0.4, 0.4, 3]} />\n                <meshStandardMaterial color={props.colour} />\n            </mesh>\n            <mesh ref={mesh}\n                position={props.position}\n                position-z={props.isWinId ? [3] : [props.position[2]]}\n                receiveShadow\n                castShadow\n                rotation-z={-Math.PI / 4}\n            >\n                <cylinderBufferGeometry args={[0.4, 0.4, 3]} />\n                <meshStandardMaterial color={props.colour} />\n            </mesh>\n        </group>\n    )\n}\n\nexport default PlayerX\n","import styled from \"styled-components\";\n\nexport const Colour = {\n    boardColour: \"#152D35\",\n    cellColour: \"#D4ECDD\",\n    cellWinColour: \"#345B63\",\n    titleColour: \"#112031\",\n}\n\nexport const LayoutButton = styled.button`\n    background-color: #EEEEEE;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    border-radius: 10px;\n    padding: 10px;\n    box-shadow: 0 1px 3px rgba(0,0,0,0.2);\n    transition: all 0.2s ease-in-out;\n\n    &:hover {\n        transform: scale(1.2);\n        transition: all 0.2s ease-in-out;\n        cursor: pointer;\n    }\n`\nexport const LayoutCard = styled.div`\n    background: #EEEEEE;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center;\n    border-radius: 10px;\n    padding: 30px 200px;\n    box-shadow: 0 1px 3px rgba(0,0,0,0.2);\n    transition: all 0.2s ease-in-out;\n    font-size: 24px;\n    font-weight: bold;\n\n    &:hover {\n        transform: scale(1.02);\n        transition: all 0.2s ease-in-out;\n        cursor: pointer;\n    }   \n`","import { useRef } from 'react'\nimport { BoardState } from \"../3DGameState/GameState\";\nimport PlayerO from './PlayerO';\nimport PlayerX from './PlayerX';\nimport { Colour } from '../Layout/LayoutElem';\n\ntype CellProps = {\n    position: [number, number, number],\n    id: number,\n    onClick: (cellIndex: number) => void,\n    board: BoardState,\n    hasWon: boolean,\n    winIndex: number[] | null,\n};\n\nconst Cell = ({ position, id, onClick, board, hasWon, winIndex }: CellProps) => {\n    const winIds = winIndex ? winIndex : [10, 10 ,10]\n    const isWinId = winIds.includes(id);\n    const colour = hasWon && isWinId ? Colour.cellWinColour : Colour.cellColour;\n    \n\n    const cellValue = board[id] ? (\n        board[id] === 'X' ? (\n            <PlayerX position={position} colour={colour} isWinId={isWinId}/>\n        ) : (\n            <PlayerO position={position} colour={colour} isWinId={isWinId}/>\n        )\n    ) : null;\n\n    const handleClick = () => {onClick(id)};\n\n    \n    const group = useRef<THREE.Group>();\n    const mesh = useRef<THREE.Mesh>();\n\n    return (\n        <group ref={group} onPointerUp={handleClick}>\n            <mesh ref={mesh} position={position} position-z={2} receiveShadow castShadow>\n                <planeBufferGeometry args={[3.5, 3.5, 1]} />\n                <meshStandardMaterial\n                    transparent\n                    opacity={0}\n                />\n            </mesh>\n            {cellValue}\n        </group>\n    )\n}\n\nexport default Cell;\n","import { useRef } from \"react\";\nimport * as THREE from 'three';\nimport * as ReactThreeFiber from \"@react-three/fiber\";\nimport { BoardState } from \"../3DGameState/GameState\";\nimport Cell from \"../3DCell/3DCell\";\nimport { Colour } from \"../Layout/LayoutElem\";\n\ndeclare global {\n    namespace JSX {\n        interface IntrinsicElements {\n            mesh: ReactThreeFiber.Object3DNode<THREE.Mesh, typeof THREE.Mesh>;\n            group: ReactThreeFiber.Object3DNode<THREE.Group, typeof THREE.Group>;\n        }\n    }\n}\n\ntype BoardProps = {\n    board: BoardState,\n    onClick: (box: number) => void,\n    hasWon: boolean,\n    winIndex: number[] | null\n};\n\nconst Board = ({ board, onClick, hasWon, winIndex }: BoardProps) => {\n    const group = useRef<THREE.Group>();\n    const mesh = useRef<THREE.Mesh>();\n\n    const cellPosition = [\n        [-4, 4, 1.5],\n        [0, 4, 1.5],\n        [4, 4, 1.5],\n        [-4, 0, 1.5],\n        [0, 0, 1.5],\n        [4, 0, 1.5],\n        [-4, -4, 1.5],\n        [0, -4, 1.5],\n        [4, -4, 1.5]\n    ];\n\n    return (\n\n        <group ref={group}>\n            <mesh ref={mesh} position={[0, 6, 1.5]} receiveShadow castShadow>\n                <boxBufferGeometry args={[12.5, 0.5, 2]} />\n                <meshStandardMaterial color={Colour.boardColour} roughness={0.1}/>\n            </mesh>\n            <mesh ref={mesh} position={[0, -6, 1.5]} receiveShadow castShadow>\n                <boxBufferGeometry args={[12.5, 0.5, 2]} />\n                <meshStandardMaterial color={Colour.boardColour} roughness={0.1}/>\n            </mesh>\n            <mesh ref={mesh} position={[6, 0, 1.5]} receiveShadow castShadow>\n                <boxBufferGeometry args={[0.5, 12.5, 2]} />\n                <meshStandardMaterial color={Colour.boardColour} roughness={0.1}/>\n            </mesh>\n            <mesh ref={mesh} position={[-6, 0, 1.5]} receiveShadow castShadow>\n                <boxBufferGeometry args={[0.5, 12.5, 2]} />\n                <meshStandardMaterial color={Colour.boardColour} roughness={0.1}/>\n            </mesh>\n            <mesh ref={mesh} position={[-2, 0, 1.5]} receiveShadow castShadow>\n                <boxBufferGeometry args={[0.5, 12.5, 2]} />\n                <meshStandardMaterial color={Colour.boardColour} roughness={0.1}/>\n            </mesh>\n            <mesh ref={mesh} position={[2, 0, 1.5]} receiveShadow castShadow>\n                <boxBufferGeometry args={[0.5, 12.5, 2]} />\n                <meshStandardMaterial color={Colour.boardColour} roughness={0.1}/>\n            </mesh>\n            <mesh ref={mesh} position={[0, -2, 1.5]} receiveShadow castShadow>\n                <boxBufferGeometry args={[12.5, 0.5, 2]} />\n                <meshStandardMaterial color={Colour.boardColour} roughness={0.1}/>\n            </mesh>\n            <mesh ref={mesh} position={[0, 2, 1.5]} receiveShadow castShadow>\n                <boxBufferGeometry args={[12.5, 0.5, 2]} />\n                <meshStandardMaterial color={Colour.boardColour} roughness={0.1}/>\n            </mesh>\n      \n       {\n        cellPosition.map(\n            ([x, y, z], index) => (\n                <Cell key={index} position={[x,y,z]} id={index} board={board} onClick={onClick} hasWon={hasWon} winIndex={winIndex}/>\n            )\n        )\n    }\n          </group>\n    );\n}\n\n\nexport default Board;\n","import styled from 'styled-components';\n\ntype LayoutProps = {\n    gap: number,\n}\n\nexport const Row = styled.div<LayoutProps>`\n    display: flex;\n    flex-direction: row;\n    gap: ${(props) => props.gap}px;\n`\n\nexport const Column = styled.div<LayoutProps>`\n    display: flex;\n    flex-direction: column;\n    gap: ${(props) => props.gap}px;\n`\n\nexport const GameContainer = styled.div `\n    height: 100%;\n    width: 100%;\n    padding: 30px 20px;\n`","import { useState } from \"react\";\n\nexport type Value = 'X' | 'O' | null;\n\nexport type BoardState = Value[];\n\nexport type GameState = {\n    history: BoardState[],\n    step: number\n}\n\nconst createEmptyBoard = () => {\n    return (Array<Value>(9).fill(null));\n}\n\nexport const checkWin = (boardState: BoardState) => {\n    const winCombination = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ]\n\n    for (let i = 0; i < winCombination.length; i++) {\n        const [a, b, c] = winCombination[i];\n        if (boardState[a] && boardState[a] === boardState[b] && boardState[a] === boardState[c]) {\n            return {\n                winner: boardState[a], \n                winIndex: [a,b,c]\n            };\n        }\n    }\n    return null;\n};\n\nexport const useGameState = () => {\n    const [gameState, setGameState] = useState<GameState>(\n        {\n            history: [createEmptyBoard()],\n            step: 0,\n        }\n    )\n    const current = gameState.history[gameState.step];\n    const isNext = (gameState.step % 2) === 0;\n    const winner = checkWin(current)?.winner ?? null;\n    const winIndex = checkWin(current)?.winIndex ?? null;\n\n    const handleClick = (box: number) => {\n        const history = gameState.history.slice(0, gameState.step + 1)\n        const boardState = history[history.length - 1];\n\n        if (checkWin(boardState)?.winner || boardState[box]) {\n            return;\n        }\n        const newBoardState = boardState.slice();\n        newBoardState[box] = (gameState.step % 2) === 0 ? 'X' : 'O';\n\n        history.push(newBoardState);\n\n        setGameState({\n            history: history,\n            step: history.length - 1\n        })\n    };\n\n    const jumpBack = (step: number) => {\n        setGameState({\n            history: gameState.history,\n            step,\n        })\n    };\n\n    return {\n        gameState,\n        current,\n        isNext,\n        winner,\n        winIndex,\n        handleClick,\n        jumpBack\n    };\n};\n\n","import { BoardState } from \"../3DGameState/GameState\";\nimport { LayoutButton } from \"../Layout/LayoutElem\";\n\ntype ActionLogProps = {\n    history: BoardState[],\n    jumpBack: (step: number) => void\n}\n\nconst ActionLog = (props: ActionLogProps) => {\n    return (\n        <>\n            <ol>\n            <h2>Action Logs</h2>\n                {\n                    props.history.map(\n                        (_, stepIndex) => {\n                            return (\n                                <>\n                                    <li key={stepIndex}>\n                                        <LayoutButton onClick={() => props.jumpBack(stepIndex)}>\n                                            Go to {stepIndex === 0 ? 'start' : `move #${stepIndex}`}\n                                        </LayoutButton>\n                                    </li>\n                                    <br />\n\n                                </>\n                            );\n                        }\n                    )\n                }\n            </ol>\n        </>\n    )\n}\n\nexport default ActionLog;\n","import { useRef } from \"react\";\nimport * as THREE from \"three\";\nimport ChickenPie from \"../../assets/CHICKEN Pie_Regular.json\"\nimport { Colour } from \"../Layout/LayoutElem\";\n\nconst Text = () => {\n  const group = useRef(null);\n  const mesh = useRef(null);\n\n  const font = new THREE.FontLoader().parse(ChickenPie);\n\n  const textOptions = {\n    font,\n    size: 1.5,\n    height: 0.25,\n  };\n\n  return (\n    <group ref={group} position={[-5, 8, 2]}>\n      <mesh castShadow receiveShadow ref={mesh}>\n        <textGeometry attach=\"geometry\" args={[\"Tic Tac Toe\", textOptions]} />\n        <meshPhysicalMaterial\n          attach=\"material\"\n          color={Colour.titleColour}\n          roughness={0.1}\n        />\n      </mesh>\n    </group>\n  );\n}\n\n\nexport default Text;","import { Canvas } from \"@react-three/fiber\";\nimport { OrbitControls } from \"@react-three/drei\";\nimport Board from '../3DBoard/3DBoard';\nimport { Row, Column, GameContainer } from './3DGameElem';\nimport { useGameState } from '../3DGameState/GameState';\nimport ActionLog from '../3DActionLog/3DActionLog';\nimport Text from './Text';\nimport { LayoutCard, LayoutButton } from '../Layout/LayoutElem';\n\nconst GamePage = () => {\n    const {\n        gameState, current, isNext, winner, winIndex, handleClick, jumpBack\n    }\n        = useGameState();\n\n    const restartClick = () => {\n        window.location.reload();\n    }\n\n    const hasWon = winner ? true : false;\n\n    const draw = !current.includes(null) && !hasWon;\n\n    return (\n        <GameContainer>\n            <Row gap={20}>\n                <Column gap={20}>\n                    <div className=\"canvas\">\n                        <Canvas style={{ height: \"500px\", width: \"800px\" }} camera={{ position: [-15, 8, 30], fov: 40 }}>\n                            <Text />\n                            <ambientLight intensity={0.3} />\n                            <spotLight position={[0, 10, 15]} />\n                            <Board board={current} onClick={handleClick} hasWon={hasWon} winIndex={winIndex} />\n                            <OrbitControls />\n                        </Canvas>\n                    </div>\n                    {draw ? <div>\n                        <LayoutButton onClick={restartClick} style={{ fontSize: \"18px\", fontWeight: \"bold\", alignItems: \"center\", margin: \"10px 400px\" }}>\n                            Restart\n                        </LayoutButton>\n                        <LayoutCard>\n                            {`Draw`}\n                        </LayoutCard>\n                    </div> : hasWon ?\n                        <div>\n                            <LayoutButton onClick={restartClick} style={{ fontSize: \"18px\", fontWeight: \"bold\", alignItems: \"center\", margin: \"10px 400px\" }}>\n                                Restart\n                            </LayoutButton>\n                            <LayoutCard>\n                                {`Winner: Player ${winner}`}\n                            </LayoutCard>\n                        </div>\n                        :\n                        <LayoutCard>\n                            {`Player ${isNext ? 'X' : 'O'}'s turn`}\n                        </LayoutCard>}\n                    {/* {hasWon ?\n                        <div>\n                            <LayoutButton onClick={restartClick} style={{ fontSize: \"18px\", fontWeight: \"bold\", alignItems: \"center\", margin:\"10px 400px\" }}>\n                                Restart\n                            </LayoutButton> \n                            <LayoutCard>\n                                {`Winner: Player ${winner}`}\n                            </LayoutCard>\n                        </div> \n                        :\n                        <LayoutCard>\n                            {`Player ${isNext ? 'X' : 'O'}'s turn`}\n                        </LayoutCard>\n                    } */}\n                </Column>\n                <Column gap={20}>\n                    <ActionLog history={gameState.history} jumpBack={jumpBack} />\n                </Column>\n            </Row>\n        </GameContainer>\n    )\n}\n\nexport default GamePage;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GamePage from './components/3DGame/3DGame';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GamePage />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}